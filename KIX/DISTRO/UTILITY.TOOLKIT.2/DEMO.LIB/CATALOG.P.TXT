PROGRAM CATALOG;

(* PRINT LISTING OF DIRECTORY
   CONTENTS : PRODOS UTILITIES
   TOOLKIT DEMO PROGRAM.

   COPYRIGHT (C) 1986 BY
   KYAN SOFTWARE, INC.      *)

CONST
 SPACES65='                                                                 ';
TYPE
#I PRODOS.TYPES.I

VAR
   DIRECTORYNAME,
   SYSTEMPREFIX :PATHSTRING;
   BASEPOINTER  :FILEPOINTER;

#I PRTMLIERROR.I
#I GETPREFIX.I
#I GETDIR.I
#I FINDCLOCK.I
#I GETCLOCK.I
#I GETDATE.I
#I GETTIME.I
#I FILESIZE.I
#I FILETYPE.I

PROCEDURE HOME;
BEGIN
#A
 STX _T
 JSR $FC58
 LDX _T
#
END;

PROCEDURE TIME_DATE;
VAR CLOCKSLOT,MONTH,DAY,YEAR,HOUR,MINUTE,
    SECOND,MILLI,WEEKDAY:INTEGER;
BEGIN
   CLOCKSLOT:=FINDCLOCK;
   IF CLOCKSLOT=0 THEN
   BEGIN
      GETDATE(MONTH,DAY,YEAR);
      GETTIME(HOUR,MINUTE);
      SECOND  := -1;
      WEEKDAY := -1
   END
   ELSE GETCLOCK(MONTH,DAY,YEAR,HOUR,MINUTE,WEEKDAY,SECOND,MILLI);
   IF CLOCKSLOT <> 0
   THEN WRITELN('THUNDERCLOCK FOUND IN SLOT #',CLOCKSLOT)
   ELSE WRITELN('NO THUNDERCLOCK IN SYSTEM');
   WRITELN;
   WRITE('SYSTEM DATE: ');
   IF DAY=0 THEN WRITELN('<NOT SET>')
   ELSE
   BEGIN
      IF WEEKDAY <> -1 THEN
         CASE WEEKDAY OF
           0 : WRITE('SUN  ');
           1 : WRITE('MON  ');
           2 : WRITE('TUE  ');
           3 : WRITE('WED  ');
           4 : WRITE('THU  ');
           5 : WRITE('FRI  ');
           6 : WRITE('SAT  ')
         END;
      WRITE(DAY,'-');
      CASE MONTH OF
        1 : WRITE('JAN-');
        2 : WRITE('FEB-');
        3 : WRITE('MAR-');
        4 : WRITE('APR-');
        5 : WRITE('MAY-');
        6 : WRITE('JUN-');
        7 : WRITE('JUL-');
        8 : WRITE('AUG-');
        9 : WRITE('SEP-');
       10 : WRITE('OCT-');
       11 : WRITE('NOV-');
       12 : WRITE('DEC-')
      END;
      WRITELN(YEAR);
   END;
   WRITE('SYSTEM TIME: ',HOUR,':');
   IF MINUTE < 10 THEN WRITE('0');
   WRITE(MINUTE);
   IF SECOND >= 0 THEN
   BEGIN
      WRITE(':');
      IF SECOND < 10 THEN WRITE('0');
      WRITE(SECOND)
   END;
   WRITELN; WRITELN;
   WRITE('WORKING DIRECTORY: ');
   GETPREFIX(SYSTEMPREFIX);
   WRITELN(SYSTEMPREFIX)
END;

PROCEDURE ASKFORDIR;
VAR J:INTEGER;
BEGIN
   WRITELN('TYPE NAME OF DIRECTORY TO CATALOG');
   WRITELN('PRESS [RETURN] TO USE WORKING DIRECTORY');
   WRITELN('PRESS = TO EXIT');
   WRITE('--> '); READLN(DIRECTORYNAME);
   IF DIRECTORYNAME[1]=' ' THEN
   BEGIN
      DIRECTORYNAME:=SYSTEMPREFIX;
      J:=1; WHILE (DIRECTORYNAME[J]<>' ') DO
      BEGIN
         WRITE(DIRECTORYNAME[J]);
         J:=J+1
      END;
      WRITELN;
   END
END;

PROCEDURE PRTFILETYPE(FITYPE:INTEGER);
BEGIN
   IF FITYPE IN [4,6,15,25,26,27,255]
   THEN
      CASE FITYPE OF
          4     : WRITE('TXT');
          6     : WRITE('BIN');
         15     : WRITE('DIR');
         25     : WRITE('ADB');
         26     : WRITE('AWP');
         27     : WRITE('ASP');
        255     : WRITE('SYS');
      END
   ELSE WRITE(FITYPE:3);
   WRITE('  ')
END;
 
PROCEDURE LISTFILES;
VAR LINECOUNT,FITYPE,
    FISIZE,ERRCODE,
    I,J,K,N     :INTEGER;
    PATHNAME    :PATHSTRING;
    WALKER      :FILEPOINTER;
BEGIN
   WALKER:=BASEPOINTER;
   LINECOUNT:=0; N:=0;
   WHILE (WALKER<>NIL) DO
   BEGIN
      J:=0; PATHNAME:=DIRECTORYNAME;
      REPEAT J:=J+1 UNTIL (PATHNAME[J]=' ');
      IF (PATHNAME[J-1]<>'/') THEN
      BEGIN PATHNAME[J]:='/'; J:=J+1 END;
      FOR I:= 0   TO 15 DO PATHNAME[I+J]:=WALKER^.FILENAME[I+1];
      FOR K:= I+J TO 65 DO PATHNAME[K]:=' ';
      ERRCODE := FILESIZE(PATHNAME,FISIZE);
      IF ERRCODE=0 THEN ERRCODE:=FILETYPE(PATHNAME,FITYPE);
      IF ERRCODE<>0 THEN
      BEGIN
         WRITELN; PRTMLIERROR(ERRCODE);
         WALKER:=NIL; WRITELN
      END ELSE
      BEGIN
         WRITE(WALKER^.FILENAME,'  ');
         PRTFILETYPE(FITYPE);
         WRITELN(FISIZE:5);
         WALKER:=WALKER^.NEXTFILE;
         N:=N+1;
         LINECOUNT:=LINECOUNT+1;
         IF LINECOUNT=23 THEN
         BEGIN
            WRITE('   [MORE]'); READLN;
            LINECOUNT:=0
         END
      END
   END;
   IF ERRCODE=0 THEN
   BEGIN
      J:=2;
      WHILE (PATHNAME[J] <> '/') DO J:=J+1;
      FOR K:=J TO 65 DO PATHNAME[K]:=' ';
      ERRCODE:=FILESIZE(PATHNAME,FISIZE);
      IF ERRCODE=0 THEN WRITELN(FISIZE:5,' BLOCKS USED : ',N:3,' FILES LISTED')
      ELSE BEGIN
         PRTMLIERROR(ERRCODE); WRITELN(' READING VOLUME HEADER')
      END
   END;
   WRITE('PRESS [RETURN]...');
   READLN
END;

PROCEDURE DO_CATALOG;
VAR
    ERRORCODE,
    FICOUNT     :INTEGER;
    CH          :CHAR;
BEGIN
   ERRORCODE:=GETDIR(DIRECTORYNAME,BASEPOINTER);
   IF ERRORCODE<>0 THEN
   BEGIN
      PRTMLIERROR(ERRORCODE); WRITELN;
      WRITE('PRESS [RETURN] TO CONTINUE...');
      READLN
   END
   ELSE LISTFILES
END;

BEGIN
   SYSTEMPREFIX:=SPACES65;
   REPEAT
      HOME;
      TIME_DATE;
      ASKFORDIR;
      IF DIRECTORYNAME[1]<>'=' THEN DO_CATALOG
   UNTIL DIRECTORYNAME[1]='=';
   HOME
END.
