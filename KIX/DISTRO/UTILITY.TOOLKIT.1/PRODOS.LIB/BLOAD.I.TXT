FUNCTION BLOAD(VAR PATHNAME:PATHSTRING; LEN,DEST:INTEGER):INTEGER;
VAR RESULT:INTEGER;
BEGIN
#A
 STX _T
 LDY #13
 JSR MAKEPATH
 LDA _T+2
 STA UTLPRO_XTRA+1
 LDA _T+3
 STA UTLPRO_XTRA+2
 LDA #10
 STA UTLPRO_XTRA ;PARM COUNT
 JSR _MLI
 DB  $C4        ;GET_FILE_INFO
 DW  UTLPRO_XTRA
 BNE BLOAD9
 LDA UTLPRO_XTRA+4
 CMP #6         ;BINARY FILE?
 BEQ BLOAD1
 LDA #$4B
 BNE BLOAD9     ;ALWAYS
BLOAD1 EQU *
 JSR FIND_OPEN
 STA UTLPRO_XTRA+3
 STY UTLPRO_XTRA+4
 LDA #3
 STA UTLPRO_XTRA
 JSR _MLI       ;OPEN
 DB  $C8
 DW  UTLPRO_XTRA
 BEQ BLOAD2
 PHA            ;ERROR
 JSR FREE_OPEN
 PLA
 BNE BLOAD9     ;ALWAYS
BLOAD2 EQU *
 LDA UTLPRO_XTRA+5
 STA UTLPRO_XTRA+1 ;REFNUM
 LDA #4
 STA UTLPRO_XTRA   ;PARM COUNT
 LDY #9
BLOAD3 EQU *
 LDA (_SP),Y
 STA UTLPRO_XTRA-7,Y    ;-7 = -9+2
 INY
 CPY #13
 BNE BLOAD3
 ORA UTLPRO_XTRA+4      ;LENGTH ZERO?
 BNE BLOAD4             ;NO
 DEC UTLPRO_XTRA+4
 DEC UTLPRO_XTRA+5      ;REQ LEN = $FFFF
BLOAD4 EQU *
 JSR _MLI
 DB  $CA        ;READ
 DW  UTLPRO_XTRA
 PHA
 JSR FREE_OPEN
 LDA UTLPRO_XTRA+1      ;REFNUM
 JSR CLOSE_FILE
 PLA
BLOAD9 LDY #5
 STA (_SP),Y
 LDA #0
 INY
 STA (_SP),Y
 PLA
 LDX _T
 JSR RESTPATH
#
 BLOAD := RESULT
END;
#A
 IFNDEF MAKEPATH
MAKEPATH EQU *
 LDA (_SP),Y    ;ADDRESS OF STRING ADDRESS
 STA _T+2
 INY
 LDA (_SP),Y
 STA _T+3
 LDY #64
MPTH1 LDA (_T+2),Y
 CMP #$20       ;SPACE?
 BNE MPTH2      ;NO. FOUND LAST CHAR OF PATHNAME
 DEY
 BPL MPTH1
 INY            ;Y=0
 TYA
 STA (_T+2),Y   ;MAKE LENGTH ZERO
 RTS
MPTH2 INY       ;PATH LENGTH
 STY PLENX
 DEY
MPTH3 LDA (_T+2),Y
 INY
 STA (_T+2),Y    ;MOVE STRING FORWARD ONE BYTE
 DEY
 DEY
 BPL MPTH3
 INY            ;Y=0
 LDA PLENX
 STA (_T+2),Y
 RTS
PLENX DS 1
 ENDIF
;
 IFNDEF RESTPATH
RESTPATH EQU *  ;RESTORE PATH @(_T+2)
 LDY #0
 LDA (_T+2),Y   ;LENGTH
 STA PLENX
 INY
RPTH1 LDA (_T+2),Y
 DEY
 STA (_T+2),Y   ;MOVE STRING BACK ONE BYTE
 INY
 INY
 DEC PLENX
 BPL RPTH1
 RTS
 ENDIF
;
 IFNDEF FIND_OPEN
FIND_OPEN EQU * ;ALLOCATE OPEN FILE BUFFER
 LDX _T
 DEX
 DEX
 LDA #>OPENSAFE
 STA 0,X
 LDA #<OPENSAFE
 STA 1,X
 LDA #>1279
 LDY #<1279
 JSR _LIB+$117
 LDA OPENSAFE+1
 STA OPENADR+1
 LDA OPENSAFE
 STA OPENADR
 BEQ ALCOP9     ;BUFFER ON PAGE BOUNDARY
 INC OPENADR+1
 LDA #0
 STA OPENADR
ALCOP9 EQU *    ;A IS ALWAYS ZERO
 LDY OPENADR+1
 STX _T
 RTS            ;RETURN WITH BUFFER @(A,Y)
OPENADR  DW 0   ;ADDRESS OF BUFFER ON PAGE BOUNDARY
OPENSAFE DW 0   ;ADDRESS OF ACTUAL BUFFER START FOR DISPOSE
;
FREE_OPEN EQU *  ;FREE OPEN BUFFER FROM GLOBAL
 LDX _T
 DEX
 DEX
 LDA #>OPENSAFE
 STA 0,X
 LDA #<OPENSAFE
 STA 1,X
 JSR _LIB+$114
 STX _T
 RTS
;
CLOSE_FILE EQU *
 STA CL_XTRA+1
 JSR _MLI
 DB  $CC
 DW  CL_XTRA
 RTS
CL_XTRA DB 1,0
 ENDIF
;
 IFNDEF UTLPRO_XTRA
UTLPRO_XTRA DS 20
 ENDIF
#
