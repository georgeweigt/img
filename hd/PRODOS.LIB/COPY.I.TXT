FUNCTION COPY(VAR SOURCEPATH,DESTPATH:PATHSTRING):INTEGER;
VAR RESULT:INTEGER;
BEGIN
#A
 STX _T
 LDY #11
 JSR MAKEPATH
 LDA _T+2
 STA SRCLIST+1
 STA SRCADR
 LDA _T+3
 STA SRCLIST+2
 STA SRCADR+1
 JSR _MLI
 DB  $C4
 DW  SRCLIST
 BEQ COPY0B
 PHA
COPY0C JSR RESTPATH
 PLA
COPY0 JMP COPY9
COPY0B LDY #9
 JSR MAKEPATH
 LDA _T+2
 STA DSTADR
 LDA _T+3
 STA DSTADR+1
 LDA #1
 STA _T+1
 JSR _MLI
 DB  $C1        ;DESTROY
 DW  _T+1
 BEQ COPY0A
 CMP #$46       ;FILE NOT FOUND?
 BEQ COPY0A
 STA COPYERROR
 JMP COPY8A     ;ALWAYS
COPY0A EQU *    ;CREATE DESTINATION
 LDA #7
 STA _T+1
 LDA #$C3
 STA _T+4
 LDY #3
COPY1 EQU *
 LDA SRCLIST+4,Y
 STA _T+5,Y
 LDA #0
 STA _T+9,Y
 DEY
 BPL COPY1
 JSR _MLI
 DB  $C0        ;CREATE
 DW  _T+1
 BEQ COPY1A
 STA COPYERROR
 JMP COPY8A     ;ALWAYS
;ALLOCATE BUFFERS SIMULTANEOUSLY
COPY1A JSR FIND_OPEN  ;FOR SOURCE
 STY SRCOPN+4
 LDA OPENSAFE
 STA SRCSAFE
 LDA OPENSAFE+1
 STA SRCSAFE+1
 JSR FIND_OPEN  ;FOR DESTINATION
 STY DSTOPN+4
 JSR FIND_BUF   ;.5K R/W BUFFER
 STA COPYLIST+2
 STY COPYLIST+3
;PERFORM OPENS
 LDA SRCLIST+1
 STA SRCOPN+1
 LDA SRCLIST+2
 STA SRCOPN+2
 JSR _MLI
 DB  $C8        ;OPEN
 DW  SRCOPN
 BEQ COPY1B
 STA COPYERROR
 JMP COPY8      ;DE-ALLOCATE BUFFERS AND EXIT
COPY1B LDA _T+2
 STA DSTOPN+1
 LDA _T+3
 STA DSTOPN+2
 JSR _MLI
 DB  $C8
 DW  DSTOPN
 BEQ COPY2
 STA COPYERROR
 LDA SRCOPN+5   ;REFNUM
 JSR CLOSE_FILE
 JMP COPY8
COPY2 EQU *     ;READ/WRITE LOOP
 LDA SRCOPN+5
 STA COPYLIST+1
 JSR _MLI
 DB  $CA        ;READ
 DW  COPYLIST
 BEQ COPY3
 CMP #$4C       ;EOF?
 BEQ COPY6
 BNE COPY7
COPY3 EQU *
 LDA COPYLIST+6
 STA COPYLIST+4
 LDA COPYLIST+7
 STA COPYLIST+5
 LDA DSTOPN+5
 STA COPYLIST+1
 JSR _MLI
 DB  $CB        ;WRITE
 DW  COPYLIST
 BEQ COPY2
 BNE COPY7
COPY6 EQU *
 LDA SRCLIST+4  ;SOURCE'S ACCESS
 STA _T+10
 LDA _T+2
 STA SRCLIST+1
 LDA _T+3
 STA SRCLIST+2
 LDA #10
 STA SRCLIST
 JSR _MLI
 DB  $C4        ;GET_FILE_INFO
 DW  SRCLIST
 BNE COPY7
 LDA _T+10
 STA SRCLIST+4
 LDA #7
 STA SRCLIST
 JSR _MLI
 DB  $C3        ;SET_FILE_INFO
 DW  SRCLIST
COPY7 EQU *
 STA COPYERROR
 LDA SRCOPN+5
 JSR CLOSE_FILE
 LDA DSTOPN+5
 JSR CLOSE_FILE
COPY8 EQU *
 JSR FREE_READ  ;FREE R/W BUFFER
 JSR FREE_OPEN  ;FREE DEST'S OPEN BUFFER
 LDA SRCSAFE+1
 STA OPENSAFE+1
 LDA SRCSAFE
 STA OPENSAFE
 JSR FREE_OPEN  ;FREE SOURCE'S OPEN BUFFER
COPY8A EQU *
 LDA SRCADR
 STA _T+2
 LDA SRCADR+1
 STA _T+3
 JSR RESTPATH
 LDA DSTADR
 STA _T+2
 LDA DSTADR+1
 STA _T+3
 JSR RESTPATH
 LDA COPYERROR
COPY9 EQU *
 LDY #5
 STA (_SP),Y
 INY
 LDA #0
 STA (_SP),Y
 LDX _T
#
 COPY := RESULT
END;
#A
SRCSAFE DW 0
DSTADR  DW 0
SRCADR  DW 0
COPYERROR DB 0
SRCLIST DB 10
 DS 17
SRCOPN DB 3
 DW 0,0
 DB 0
DSTOPN DB 3
 DW 0,0
 DB 0
COPYLIST EQU *
 DB 4
 DB 0
 DW 0,512,0
;
 IFNDEF FIND_OPEN
FIND_OPEN EQU * ;ALLOCATE OPEN FILE BUFFER
 LDX _T
 DEX
 DEX
 LDA #>OPENSAFE
 STA 0,X
 LDA #<OPENSAFE
 STA 1,X
 LDA #>1279
 LDY #<1279
 JSR _LIB+$117
 LDA OPENSAFE+1
 STA OPENADR+1
 LDA OPENSAFE
 STA OPENADR
 BEQ ALCOP9     ;BUFFER ON PAGE BOUNDARY
 INC OPENADR+1
 LDA #0
 STA OPENADR
ALCOP9 EQU *    ;A IS ALWAYS ZERO
 LDY OPENADR+1
 STX _T
 RTS            ;RETURN WITH BUFFER @(A,Y)
OPENADR  DW 0   ;ADDRESS OF BUFFER ON PAGE BOUNDARY
OPENSAFE DW 0   ;ADDRESS OF ACTUAL BUFFER START FOR DISPOSE
;
FREE_OPEN EQU *  ;FREE OPEN BUFFER FROM GLOBAL
 LDX _T
 DEX
 DEX
 LDA #>OPENSAFE
 STA 0,X
 LDA #<OPENSAFE
 STA 1,X
 JSR _LIB+$114
 STX _T
 RTS
;
CLOSE_FILE EQU *
 STA CL_XTRA+1
 JSR _MLI
 DB  $CC
 DW  CL_XTRA
 RTS
CL_XTRA DB 1,0
 ENDIF
;
;
;
;
 IFNDEF FIND_BUF
FIND_BUF EQU * ;ALLOCATE 512 BYTE READ/WRITE BUFFER
 LDX _T
 DEX
 DEX
 LDA #>READADR
 STA 0,X
 LDA #<READADR
 STA 1,X
 LDA #>512
 LDY #<512
 JSR _LIB+$117
 LDA READADR
 LDY READADR+1  ;BUFFER ADDRESS @ (A,Y)
 STX _T
 RTS
READADR DW 0
;
FREE_READ EQU *  ;FREE R/W BUFFER FROM GLOBAL
 LDX _T
 DEX
 DEX
 LDA #>READADR
 STA 0,X
 LDA #<READADR
 STA 1,X
 JSR _LIB+$114
 STX _T
 RTS
 ENDIF
;
;
;
 IFNDEF MAKEPATH
MAKEPATH EQU *
 LDA (_SP),Y    ;ADDRESS OF STRING ADDRESS
 STA _T+2
 INY
 LDA (_SP),Y
 STA _T+3
 LDY #64
MPTH1 LDA (_T+2),Y
 CMP #$20       ;SPACE?
 BNE MPTH2      ;NO. FOUND LAST CHAR OF PATHNAME
 DEY
 BPL MPTH1
 INY            ;Y=0
 TYA
 STA (_T+2),Y   ;MAKE LENGTH ZERO
 RTS
MPTH2 INY       ;PATH LENGTH
 STY PLENX
 DEY
MPTH3 LDA (_T+2),Y
 INY
 STA (_T+2),Y    ;MOVE STRING FORWARD ONE BYTE
 DEY
 DEY
 BPL MPTH3
 INY            ;Y=0
 LDA PLENX
 STA (_T+2),Y
 RTS
PLENX DS 1
 ENDIF
;
 IFNDEF RESTPATH
RESTPATH EQU *  ;RESTORE PATH @(_T+2)
 LDY #0
 LDA (_T+2),Y   ;LENGTH
 STA PLENX
 INY
RPTH1 LDA (_T+2),Y
 DEY
 STA (_T+2),Y   ;MOVE STRING BACK ONE BYTE
 INY
 INY
 DEC PLENX
 BPL RPTH1
 RTS
 ENDIF
#
