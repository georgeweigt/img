FUNCTION APPEND(VAR SOURCEPATH,ADDPATH:PATHSTRING):INTEGER;
VAR RESULT:INTEGER;
BEGIN
#A
 STX _T
 LDY #11
 JSR MAKEPATH   ;SOURCE
 LDA _T+2
 STA OPAS+1
 LDA _T+3
 STA OPAS+2
 LDY #9
 JSR MAKEPATH
 LDA _T+2
 STA OPDS+1
 LDA _T+3
 STA OPDS+2
 JSR FIND_OPEN
 STY OPAS+4
 LDA OPENSAFE
 STA ASDSAFE
 LDA OPENSAFE+1
 STA ASDSAFE+1
 JSR FIND_OPEN
 STY OPDS+4
 JSR _MLI
 DB  $C8        ;OPEN
 DW  OPAS
 BEQ APP0
 STA APERROR
 JMP APP8       ;RESTORE PATHS AND OPEN BUFFERS
;
APP0 EQU *
 JSR _MLI
 DB  $C8
 DW  OPDS
 BEQ APP1
 STA APERROR
 LDA OPAS+5
 JSR CLOSE_FILE
 JMP APP8
;
APP1 EQU *      ;BOTH OPEN; MOVE REF NUMBERS
 LDA OPAS+5
 STA RDAS+1
 STA ASEOF+1
 LDA OPDS+5
 STA RDDS+1
;
 JSR _MLI
 DB  $D1        ;GET_EOF
 DW  ASEOF
 BEQ APP2
 STA APERROR
 JMP APP7       ;CLOSE BOTH AND FALL THRU TO APP8
;
APP2 EQU *
 JSR _MLI
 DB  $CE        ;SET_FILE_MARK
 DW  ASEOF
 BEQ APP2A
 STA APERROR
 JMP APP7
;
APP2A EQU *
 JSR FIND_BUF
 STA RDAS+2
 STY RDAS+3
 STA RDDS+2
 STY RDDS+3
;
APP3 JSR _MLI
 DB  $CA        ;READ
 DW  RDDS
 BNE APP6
 LDA RDDS+6     ;WRITE SAME # READ
 STA RDAS+4
 LDA RDDS+7
 STA RDAS+5
 JSR _MLI
 DB  $CB        ;WRITE
 DW  RDAS
 BEQ APP3
;
APP6 CMP #$4C
 BNE APP6A
 LDA #0
APP6A EQU *
 STA APERROR
 JSR FREE_READ
APP7 LDA RDDS+1
 JSR CLOSE_FILE
 LDA RDAS+1
 JSR CLOSE_FILE
APP8 EQU *
 LDA OPAS+1
 STA _T+2
 LDA OPAS+2
 STA _T+3
 JSR RESTPATH
 LDA OPDS+1
 STA _T+2
 LDA OPDS+2
 STA _T+3
 JSR RESTPATH
 JSR FREE_OPEN
 LDA ASDSAFE
 STA OPENSAFE
 LDA ASDSAFE+1
 STA OPENSAFE+1
 JSR FREE_OPEN
;
 LDY #5
 LDA APERROR
 STA (_SP),Y
 INY
 LDA #0
 STA (_SP),Y
 LDX _T
#
 APPEND := RESULT
END;
#A
APERROR DB 0
ASDSAFE DW 0
OPAS DB 3
 DW 0,0,0
OPDS DB 3
 DW 0,0,0
RDDS DB 4,0
 DW 0,512,0
RDAS DB 4,0
 DW 0,512,0
ASEOF DB 2
 DW 0,0
;
 IFNDEF MAKEPATH
MAKEPATH EQU *
 LDA (_SP),Y    ;ADDRESS OF STRING ADDRESS
 STA _T+2
 INY
 LDA (_SP),Y
 STA _T+3
 LDY #64
MPTH1 LDA (_T+2),Y
 CMP #$20       ;SPACE?
 BNE MPTH2      ;NO. FOUND LAST CHAR OF PATHNAME
 DEY
 BPL MPTH1
 INY            ;Y=0
 TYA
 STA (_T+2),Y   ;MAKE LENGTH ZERO
 RTS
MPTH2 INY       ;PATH LENGTH
 STY PLENX
 DEY
MPTH3 LDA (_T+2),Y
 INY
 STA (_T+2),Y    ;MOVE STRING FORWARD ONE BYTE
 DEY
 DEY
 BPL MPTH3
 INY            ;Y=0
 LDA PLENX
 STA (_T+2),Y
 RTS
PLENX DS 1
 ENDIF
;
 IFNDEF RESTPATH
RESTPATH EQU *  ;RESTORE PATH @(_T+2)
 LDY #0
 LDA (_T+2),Y   ;LENGTH
 STA PLENX
 INY
RPTH1 LDA (_T+2),Y
 DEY
 STA (_T+2),Y   ;MOVE STRING BACK ONE BYTE
 INY
 INY
 DEC PLENX
 BPL RPTH1
 RTS
 ENDIF
;
 IFNDEF FIND_OPEN
FIND_OPEN EQU * ;ALLOCATE OPEN FILE BUFFER
 LDX _T
 DEX
 DEX
 LDA #>OPENSAFE
 STA 0,X
 LDA #<OPENSAFE
 STA 1,X
 LDA #>1279
 LDY #<1279
 JSR _LIB+$117
 LDA OPENSAFE+1
 STA OPENADR+1
 LDA OPENSAFE
 STA OPENADR
 BEQ ALCOP9     ;BUFFER ON PAGE BOUNDARY
 INC OPENADR+1
 LDA #0
 STA OPENADR
ALCOP9 EQU *    ;A IS ALWAYS ZERO
 LDY OPENADR+1
 STX _T
 RTS            ;RETURN WITH BUFFER @(A,Y)
OPENADR  DW 0   ;ADDRESS OF BUFFER ON PAGE BOUNDARY
OPENSAFE DW 0   ;ADDRESS OF ACTUAL BUFFER START FOR DISPOSE
;
FREE_OPEN EQU *  ;FREE OPEN BUFFER FROM GLOBAL
 LDX _T
 DEX
 DEX
 LDA #>OPENSAFE
 STA 0,X
 LDA #<OPENSAFE
 STA 1,X
 JSR _LIB+$114
 STX _T
 RTS
;
CLOSE_FILE EQU *
 STA CL_XTRA+1
 JSR _MLI
 DB  $CC
 DW  CL_XTRA
 RTS
CL_XTRA DB 1,0
 ENDIF
;
;
;
;
 IFNDEF FIND_BUF
FIND_BUF EQU * ;ALLOCATE 512 BYTE READ/WRITE BUFFER
 LDX _T
 DEX
 DEX
 LDA #>READADR
 STA 0,X
 LDA #<READADR
 STA 1,X
 LDA #>512
 LDY #<512
 JSR _LIB+$117
 LDA READADR
 LDY READADR+1  ;BUFFER ADDRESS @ (A,Y)
 STX _T
 RTS
READADR DW 0
;
FREE_READ EQU *  ;FREE R/W BUFFER FROM GLOBAL
 LDX _T
 DEX
 DEX
 LDA #>READADR
 STA 0,X
 LDA #<READADR
 STA 1,X
 JSR _LIB+$114
 STX _T
 RTS
 ENDIF
#