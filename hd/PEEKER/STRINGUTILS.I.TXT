{ Assembler-Utilities zur Stringbearbeitung; Argumente :
  MaxLength : Integer, String [1] : Char                 
  Vgl. zur Syntax "Stringdemos.P"
  Aus Peeker 9/86, S. 50                                 }

Function Length (L : Integer; Var S : Char) : Integer;
Begin
  Length := 0;
#A
        LDY #7
        LDA (_SP),Y
        STA _T          ;S-Zeiger.L
        INY
        LDA (_SP),Y
        STA _T+1        ;S-Zeiger.H
        INY
        LDA (_SP),Y
        TAY             ;Laenge von S
        DEY             ;Index auf String
        LDA #$20        ;Space
FLLOOP  CMP (_T),Y      ;Vergleiche Zeichen
        BNE FLEXIT      ;Kein Space -> Fertig
        DEY             ;Weitertesten
        BPL FLLOOP      ;bis Stringanfang
FLEXIT  INY             ;Lenght zaehlt ab 1
        TYA
        LDY #5
        STA (_SP),Y     ;Funktionswert
#
End;    { Length }


Function Pos (L1 : Integer; Var S1 : Char;
              L2 : Integer; Var S2 : Char) : Integer;
Begin
  Pos := 0;
#A
        STX _T
;
        LDY #7
        LDA (_SP),Y
        STA _T+1        ;S2-Zeiger.L
        INY
        LDA (_SP),Y
        STA _T+2        ;S2-Zeiger.H
        INY
        LDA (_SP),Y
        STA _T+3        ;Laenge von S2
;
        LDY #11
        LDA (_SP),Y
        STA _T+4        ;S1-Zeiger.L
        INY
        LDA (_SP),Y
        STA _T+5        ;S1-Zeiger.H
        INY
        LDA (_SP),Y
        STA _T+6        ;Laenge von S1
;
        SEC
        LDA _T+3        ;Laenge von S2
        SBC _T+6        ;Laenge von S1
        BCC PEXIT1      ;Fehler L1>L2
        STA _T+3        ;Testlaenge von S2
        INC _T+3        ;Korrektur +1
;
        LDX #0          ;Zaehler fuer POS -1
PLOOP0  LDY #0          ;Zaehler fuer
PLOOP1  LDA (_T+4),Y    ;Zeichen aus S1
        CMP (_T+1),Y    ;Zeichen aus S2
        BNE PNEXT1
        INY
        CPY _T+6        ;Laenge von S1
        BCC PLOOP1
        BCS PDONE1
;
PNEXT1  INX
        CPX _T+3        ;Laenge von S2
        BCS PEXIT1      ;Fertig: X>=L2
        INC _T+1        ;S1-Zeiger.L
        BNE PLOOP0
        INC _T+2        ;S1-Zeiger.H
        BNE PLOOP0      ;Verzweige immer!
;
PDONE1  INX             ;-Werte von 1 an
        TXA
        LDY #5
        STA (_SP),Y     ;Funktionswert
;
PEXIT1  LDX _T
#
End;    { Pos }


Procedure Concat (L1 : Integer; Var S1 : Char;
                  L2 : Integer; Var S2 : Char;
                  L3 : Integer; Var S3 : Char);
Begin
#A
        STX _T
;
        LDY #5
        LDA (_SP),Y
        STA _T+1        ;S3-Zeiger.L
        INY
        LDA (_SP),Y     
        STA _T+2        ;S3-Zeiger.H
        INY
        LDA (_SP),Y
        STA _T+3        ;Laenge von S3
;
        LDY #9
        LDA (_SP),Y
        STA _T+4        ;S2-Zeiger.L
        INY
        LDA (_SP),Y
        STA _T+5        ;S2-Zeiger.H
        INY
        LDA (_SP),Y
        STA _T+6        ;Laenge von S2
;
        LDY #13
        LDA (_SP),Y
        STA _T+7        ;S1-Zeiger.L
        INY
        LDA (_SP),Y
        STA _T+8        ;S1-Zeiger.H
        INY
        LDA (_SP),Y
        STA _T+9        ;Laenge von S3
;
        LDY #0
CLOOP1  LDA (_T+7),Y    ;Von S1 nach
        STA (_T+1),Y    ;S3 kopieren
        INY
        CPY _T+9        ;Laenge von S1
        BCS C1DONE
        CPY _T+3        ;Laenge von S3
        BCC CLOOP1
;
C1DONE  SEC
        LDA _T+3        ;Laenge von S3
        SBC _T+9        ;Laenge von S1
        BCC C2DONE      ;fertig: L1>=L3
        BEQ C2DONE
        STA _T+10       ;Restlaenge von S3
;
        CLC
        LDA _T+1        ;S3-Zeiger.L
        ADC _T+9        ;Laenge von S1
        STA _T+1
        LDA _T+2        ;S3-Zeiger.H
        ADC #0          ;Carry-Flag
        STA _T+2
;
        LDY #0
CLOOP2  LDA (_T+4),Y    ;Von S2 nach
        STA (_T+1),Y    ;S3 kopieren
        INY
        CPY _T+6        ;Laenge von S2
        BCS C2DONE
        CPY _T+10       ;Restlaenge von S3
        BCC CLOOP2
;
C2DONE  SEC
        LDA _T+10       ;Restlaenge von S3
        SBC _T+6        ;Laenge von S2
        BCC C3DONE      ;Fertig: S2=>
        BEQ C3DONE      ;Restlaenge von S3
        STA _T+10       ;Neue Restlaenge von S3
;
        LDA #$20        ;Space
        LDX #0
CLOOP3  STA (_T+1),Y
        INY
        INX
        CPX _T+10       ;Neue Restlaenge von S3
        BCC CLOOP3
;
C3DONE  LDX _T
#
END;    { Concat }


Procedure Delete (L1, L2, L3 : Integer; Var S : Char);
Begin
#A
        LDY #5
        LDA (_SP),Y
        STA _T+1        ;S-Zeiger.L
        INY
        LDA (_SP),Y
        STA _T+2        ;S-Zeiger.H
        INY
        LDA (_SP),Y
        STA _T+3        ;Laenge fuer DELETE
        LDY #9
        LDA (_SP),Y
        STA _T+4        ;Position fuer DELETE
        DEC _T+4        ;Korrektur -1
        LDY #11
        LDA (_SP),Y
        STA _T+5        ;Laenge von S
;
        SEC
        SBC _T+4        ;Position fuer DELETE
        BCC DEXIT1      ;Fertig: >=L
        BEQ DEXIT1
;
        STA _T+6        ;Restlaenge von S
;
        CLC
        LDA _T+1        ;S-Zeiger.L
        ADC _T+4        ;Position fuer DELETE
        STA _T+1
        LDA _T+2        ;S-Zeiger.H
        ADC #0          ;Carry-Flag
        STA _T+2
;
        SEC
        LDA _T+6        ;Restlaenge von S
        SBC _T+3        ;Laenge fuer DELETE
        BCC DOVFL1      ;Ueberlauf
        BEQ DOVFL1
        STA _T+7        ;Restlaenge DELETE
;
        CLC
        LDA _T+1        ;S-Zeiger.L
        ADC _T+3        ;Laenge fuer DELETE
        STA _T+8        ;S-Zeiger danach.L
        LDA _T+2        ;S-Zeiger.H
        ADC #0          ;Carry-Flag
        STA _T+9        ;S-Zeiger danach.H
;
        LDY #0
DCOPY1  LDA (_T+8),Y    ;S-Zeichen danach
        STA (_T+1),Y    ;S-Zeichen davor
        INY
        CPY _T+7        ;Restlaenge DELETE
        BCC DCOPY1
;
DFILL0  LDA #$20        ;Space
DFILL1  STA (_T+1),Y    ;S-Leerzeichen
        INY
        CPY _T+6        ;Restlaenge von S
        BCC DFILL1
        BCS DEXIT1
;
DOVFL1  LDY #0
        BEQ DFILL0
;
DEXIT1  NOP
#
End;    { Delete }


Procedure Copy (L1 : Integer; Var S1 : Char;
                L2 : Integer; Var S2 : Char);
Begin
#A
        LDY #5
        LDA (_SP),Y
        STA _T+1        ;S2-Zeiger.L
        INY
        LDA (_SP),Y
        STA _T+2        ;S2-Zeiger.H
        INY
        LDA (_SP),Y
        STA _T+3        ;Laenge von S2
;
        LDY #9
        LDA (_SP),Y
        STA _T+4        ;S1-Zeiger.L
        INY
        LDA (_SP),Y
        STA _T+5        ;S2-Zeiger.H
        INY
        LDA (_SP),Y
        STA _T+6        ;Laenge von S1
;
        LDY #0
CPLOOP  LDA (_T+4),Y    ;Zeichen aus S1
        STA (_T+1),Y    ;nach S2 kopieren
        INY
        CPY _T+6        ;Laenge von S1
        BCS CPDONE
        CPY _T+3        ;Laenge von S2
        BCC CPLOOP
;
CPDONE  LDA _T+6        ;Laenge von S1
        CMP _T+3        ;Laenge von S2
        BCS CPEXIT      ;Fertig: >=S2
;
        LDA #$20        ;Space
CPFILL  STA (_T+1),Y    ;S2 auffuellen
        INY
        CPY _T+3        ;Laenge von S2
        BCC CPFILL
;
CPEXIT  NOP
#
End;    { Copy }


Procedure Insert (L1, L2, L3 : Integer; Var S1, S2 : Char);
Begin
#A
        LDY #5
        LDA (_SP),Y
        STA _T+1        ;S2-Zeiger.L
        INY
        LDA (_SP),Y
        STA _T+2        ;S2-Zeiger.H
        INY
        LDA (_SP),Y
        STA _T+3        ;S1-Zeiger.L
        INY
        LDA (_SP),Y
        STA _T+4        ;S1-Zeiger.H
        INY
        LDA (_SP),Y
        STA _T+5        ;Laenge INSERT
        LDY #11
        LDA (_SP),Y
        STA _T+6        ;Position INSERT
        DEC _T+6        ;Korrektur -1
        LDY #13
        LDA (_SP),Y
        STA _T+7        ;Laenge von S2
;
        SEC
        SBC _T+6        ;Position INSERT
        BCC IEXIT1      ;fertig: >=L2
        BEQ IEXIT1
;
        STA _T+8        ;Restlaenge von S2
;
        CLC
        LDA _T+1        ;S2-Zeiger.L
        ADC _T+6        ;Position INSERT
        STA _T+1
        LDA _T+2        ;S2-Zeiger.H
        ADC #0          ;Carry-Flag
        STA _T+2
;
        SEC
        LDA _T+8        ;Restlaenge von S2
        SBC _T+5        ;Laenge INSERT
        BCC IOVFL1      ;Ueberlauf
        BEQ OVERWR
        STA _T+9        ;Restlaenge INSERT
;
        CLC
        LDA _T+1        ;S2-Zeiger.L
        ADC _T+5        ;Laenge INSERT
        STA _T+10       ;S2-Zeiger danach.L
        LDA _T+2        ;S2-Zeiger.H
        ADC #0          ;Carry-Flag
        STA _T+11       ;S2-Zeiger danach.H
;
        LDY _T+9        ;Restlaenge INSERT
        DEY             ;Korrektur -1
ICOPY1  LDA (_T+1),Y    ;S2-Zeichen davor
        STA (_T+10),Y   ;S2-Zeichen danach
        DEY
        BPL ICOPY1
;
OVERWR  LDY _T+5        ;Laenge INSERT
        DEY
ICOPY2  LDA (_T+3),Y    ;S1-Zeichen
        STA (_T+1),Y    ;in S2 einfuegen
        DEY
        BPL ICOPY2
        BMI IEXIT1
;
IOVFL1  LDA _T+8        ;Restlaenge von S2
        STA _T+5        ;Laenge INSERT
        BNE OVERWR      ;Verzweige immer
;
IEXIT1  NOP
#
END;    { Insert }
