#define NULL (char *) 0
#define BUFSIZ 80
static char buf[BUFSIZ];

_cmdline()
{
	register char *bp=buf;
	register int i=1;
	register int c;
	register int argc=1;
	char *argv[20];
	int cnt;

	argv[0] = "";
	write(1,"\ncmd? ",6);
	if ((cnt=read(0,buf,BUFSIZ)) <=0){
		argv[1]=NULL;
		return main(argc, argv);
	}
	buf[cnt-1]=0;

	while (*bp){
		while ((c=*bp) && (c==' ' || c=='\t'))
			++bp;
		if (!*bp)
			break;
		argv[i++] = bp;
		++argc;
		while ((c=*++bp) && c != ' ' && c != '\t')
			;
		*bp++ = 0;
	}
	argv[i] = NULL;
	return main(argc, argv);
}
#asm
	instxt	<zpage.h>

	global	_Top_,2
	global	_mbot_,2
	global	_dev_info_,2
	global	_devinfo_,0
	global	_fil_tab_,2
	global	_filtab_,0
	global	errno_,2

	dseg
	public _DSLOT_
	public _DDRIVE_
	public _DVOLUME_
_DSLOT_	fdb	6	default slot no=6
_DDRIVE_	fcb	1	default drive no=1
_DVOLUME_	fdb	0	default volume no = 0

	global _SLOT_,2
	global _DRIVE_,2
	global _VOLUME_,2

	global _NAME_,30

	dseg
	public	MEMRY
MEMRY	rmb	2
	public	_Stksiz_
_Stksiz_
	fdb	$0800		;default stack size is 2K
	public	_End_
_End_
	fdb	$0001		;force into inited data space

	public	_main_
_main_	fdb	.begin	;pseudo-random value for mktemp

	cseg
	public	_Uorg_,_Uend_,_Corg_

	public	.begin
	entry	.begin
.begin	cld
	lda	$E000		;check basic type
	cmp	#$20		;is it integer?
	bne	chkap		;no, check applesoft
	lda	$4C		;get integer HIMEM
	ldx	$4D
	bne	put
chkap	lda	$73		;get applesoft HIMEM
	ldx	$74
put
	sec
	sbc	#6
	sta	SP		;save in stack pointer
	sta	_End_
	bcs	.1x
	dex
.1x
	stx	SP+1
	stx	_End_+1
	ldy	#5
	lda	#0
.2x
	sta	(SP),Y
	dey
	bpl	.2x
	lda	#<_Uorg_	;clear out bss space
	sta	VAL
	lda	#>_Uorg_
	sta	VAL+1
	ldy	#0
loop	tya
	sta	(VAL),Y
	inc	VAL
	bne	skip
	inc	VAL+1
skip	lda	VAL
	cmp	#<_Uend_
	bne	loop
	lda	VAL+1
	cmp	#>_Uend_
	bne	loop
	lda	MEMRY		;set end of program for alloc routines
	sta	_Top_
	sta	_mbot_
	lda	MEMRY+1
	sta	_Top_+1
	sta	_mbot_+1
	lda	#<acc		;init pointers for floating point registers
	sta	ACC
	lda	#>acc
	sta	ACC+1
	lda	#<sec
	sta	SEC
	lda	#>sec
	sta	SEC+1
	lda	#<_devinfo_
	sta	_dev_info_
	lda	#>_devinfo_
	sta	_dev_info_+1
	lda	#<_filtab_
	sta	_fil_tab_
	lda	#>_filtab_
	sta	_fil_tab_+1
	jsr	_cmdline_
	ldy	#0
	tya
	sta	(SP),Y
	iny
	sta	(SP),Y
	jsr	exit_
	brk
;
	public	_cmdline_
	public	exit_

	dseg
	global	acc,14		;space reserved for floating point registers
	global	sec,14
*
#endasm
