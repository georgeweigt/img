/************************************************/
/*                                              */
/*  DUMP  Copyright (C) 1990 by Phade Software  */
/*                                              */
/************************************************/

#include <stdio.h>

FILE *fd;
long filepos;
unsigned char	Byte[100],
				CTable[256];

int i,
	w,
	ok;

printc (c)
int c;
{
#asm
SP EQU $02
	ldy #$0b
	lda (SP),Y
	adc #$80
	jsr $fded
#endasm;
}

printh (h)
int h;
{
#asm
SB EQU $02
	ldy #$0b
	lda (SB),Y
	jsr $fdda
	lda #$a0
	jsr $fded
#endasm;
}

int readbytes ()
{
	register int	i,
					z = 0;

	for (i=0; i<w; i++)
	{
		Byte[i] = fgetc(fd);
		if (feof (fd)) break;
		z++;
	}
	return (z);
}

set_ctable ()
{
	for (i=0; i<32 ; i++) CTable[i] = '.';
	for (   ; i<128; i++) CTable[i] = (char)i;
	for (   ; i<160; i++) CTable[i] = '.';
	for (   ; i<256; i++) CTable[i] = (char)i;
}

type()
{
	set_ctable ();
	w = 79;

	while ((ok = readbytes ()) != 0)
	{
		filepos += ok;
		for (i=0; i<ok; i++)
		{
			if (Byte[i] == (char)9) printf ("\t");
			else
				if (Byte[i] == (char)13) printf ("\n");
				else printc (CTable[Byte[i]]);
		}
	}
}

textdump()
{
	set_ctable ();
	w = 60;

	while ((ok = readbytes ()) != 0)
	{
		printf ("$%08ld   ", filepos);
		filepos += ok;
		for (i=0; i<ok; i++) printc (CTable[Byte[i]]);
		printf ("\n");
	}
}

dump()
{
	set_ctable ();
	w = 16;

	while ((ok = readbytes ()) != 0)
	{
		printf ("$%08ld   ", filepos);
		filepos += ok;
		for (i=0; i<ok; i++) printh (Byte[i]);
		if (ok < w) for (   ; i<w; i++) printf ("   ");
		printf ("  ");
		for (i=0; i<ok; i++) printc (CTable[Byte[i]]);
		printf ("\n");
	}
}

hexdump()
{
	w = 16;

	while ((ok = readbytes ()) != 0)
	{
		printf ("$%08ld   ", filepos);
		filepos += ok;
		for (i=0; i<ok; i++) printh (Byte[i]);
		printf ("\n");
	}
}

main (argc, argv)
int argc;
char *argv[];
{
	printf ("\n");

	if ((argc != 2) && (argc !=3))
	{
		printf ("usage   : DUMP [-option] filename\n");
		printf ("\n");
		printf ("options : [-t] = textdump\n");
		printf ("          [-h] = hexdump\n");
		printf ("          [-d] = text & hexdump\n\n");
		exit (-1);
	}

	if (argc == 2) fd = fopen (argv[1],"r");
	else fd = fopen (argv[2],"r");

	if (fd == 0)
	{
		if (argc == 2) printf ("dump: can't open \"%s\" !\n\n",argv[1]);
		else printf ("dump: can't open \"%s\" !\n\n",argv[2]);
		exit (-1);
	}

	filepos = 0;

	if (argc == 2) type();
	else
	{
		if ((argc == 3) && (*argv[1] == '-'))
		switch (*++argv[1])
		{
			case 't' :	textdump();
						break;
			case 'd' :	dump();
						break;
			case 'h' :	hexdump();
						break;
			default  :	printf ("dump: wrong option specified\n\n");
						exit (-1);
						break;
		}
		else
		{
			printf ("dump: no option specified\n\n");
			exit (-1);
		}
	}
	fclose (fd);
	printf ("\n");

	exit (0);
}
